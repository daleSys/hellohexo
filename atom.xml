<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小茹之之</title>
  <subtitle>业精于勤 而荒于嬉 行成于思 而毁于随</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shiyansong.com/"/>
  <updated>2016-09-26T08:49:55.981Z</updated>
  <id>http://shiyansong.com/</id>
  
  <author>
    <name>爱久见珍心</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之 总</title>
    <link href="http://shiyansong.com/2016/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-%E6%80%BB/"/>
    <id>http://shiyansong.com/2016/09/26/设计模式之-总/</id>
    <published>2016-09-26T08:47:45.000Z</published>
    <updated>2016-09-26T08:49:55.981Z</updated>
    
    <content type="html"><![CDATA[<p>《转》<br>说到设计模式，当初第一次听到时，第一反应就是很深奥，完全理解不了这个概念到底是什么意思，下面我先从网上摘录一份定义。</p>
<pre><code>设计模式（Designpattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。

上面是百度当中的解释，来解释一下这句简单的话的含义，几个关键词。
</code></pre><a id="more"></a>
<pre><code>反复使用：这个不用过多解释，设计模式被使用太多了，上个系列spring源码当中就出现了很多模式，记忆中比较深刻的有模板模式，代理模式，单例模式，工厂模式等等。

多数人知晓：这个就不需要过多解释了。

分类编目：就是说可以找到一些特征去划分这些设计模式，从而进行分类。

代码设计经验：这句很重要，设计经验的总结，也就是说设计模式，是为了指导设计而从经验中总结出来的套路。

还有一种说法是说，设计模式是可以解决特定场景的问题的一系列方法，其实我觉得这个解释更贴切一点。
</code></pre><p>《为何学习设计模式》</p>
<pre><code>上面简单的介绍，是让各位首先搞清楚设计模式是什么，下面我们来说说为什么要学习设计模式，学习总要有个驱动力。

有过工作经验的人都知道，特别是那些在维护一个项目的人更是体会的贴切，像我就是其中一个，有的时候，一个很简单的需求，或者说，本来应该是很快就可以实现的需求，但是由于系统当初设计的时候没有考虑这些需求的变化，或者随着需求的累加，系统越来越臃肿，导致随便修改一处都可能造成不可预料的后果，或者是我本来可以修改下配置文件或者改一处代码就可以解决的事情，结果需要修改N处代码才可以达到我的目的。

以上都是非常可怕的后果，这些我已经深深体会过了。
</code></pre><p>《设计模式的好处及注意点》</p>
<pre><code>设计模式可以帮助我们改善系统的设计，增强系统的健壮性、可扩展性，为以后铺平道路。

但是，这些是我当初第一次接触设计模式时的感受，现在我并不这么认为，设计模式可以改善系统的设计是没错，但是过多的模式也会系统变的复杂。所以当我们第一次设计一个系统时，请将你确定的变化点处理掉，不确定的变化点千万不要假设它存在，如果你曾经这么做过，那么请改变你的思维，让这些虚无的变化点在你脑子中彻底消失。

因为我们完全可以使用另外一种手法来容纳我们的变化点，那就是重构，不过这是我们在讨论过设计模式之后的事情，现在我们就是要把这些设计模式全部理解，来锻炼我们的设计思维，而不是只做一个真正的码农。
</code></pre><p>《指导原则：六大规则》</p>
<pre><code>在学习设计模式之前，为了不让设计模式显得很模式，我们还必须了解一个东西，那就是程序设计六大原则。

这些原则是指导模式的规则，我会给一些原则附上一个例子，来说明这个原则所要表达的意思，注意，原则是死的，人是活的，所以并不是要你完完全全遵守这些规则，否则为何数据库会有逆范式，只是在可能的情况下，请尽量遵守。



单一职责原则（六大规则中的小萝莉，人见人爱）：描述的意思是每个类都只负责单一的功能，切不可太多，并且一个类应当尽量的把一个功能做到极致。

否则当你去维护这个系统的时候，你会后悔你当初的决定，下面是我自己思索的例子，给各位参考一下，给出代码。
</code></pre><p>复制代码</p>
<p>import java.io.BufferedReader;<br>import java.io.File;<br>import java.io.FileReader;<br>import java.io.IOException;</p>
<p>public class Calculator {</p>
<pre><code>public int add() throws NumberFormatException, IOException{
    File file = new File(&quot;E:/data.txt&quot;);
    BufferedReader br = new BufferedReader(new FileReader(file));
    int a = Integer.valueOf(br.readLine());
    int b = Integer.valueOf(br.readLine());
    return a+b;
}

public static void main(String[] args) throws NumberFormatException, IOException {
    Calculator calculator = new Calculator();
    System.out.println(&quot;result:&quot; + calculator.add());
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>来看上面这个例子，这个方法的作用是从一个文件中读出两个数，并返回它们的和，我相信各位也能看出当中有明显的多职责问题。如果没看出来的话，我想问各位一句，如果我想算这个文件中两个数字的差该如何做？

相信答案应该是我COPY出来一个div方法，把最后的加号改成减号。好吧，那我要除法呢？乘法呢？取模呢？COPY四次吗。这就造成了很多很多的代码重复，这不符合系统设计的规则。下面我把上述程序改善一下。

我们分离出来一个类用来读取数据，来看Reader。
</code></pre><p>复制代码</p>
<p>package com.test;</p>
<p>import java.io.BufferedReader;<br>import java.io.File;<br>import java.io.FileReader;<br>import java.io.IOException;</p>
<p>public class Reader {</p>
<pre><code>int a,b;

public Reader(String path) throws NumberFormatException, IOException{
    BufferedReader br = new BufferedReader(new FileReader(new File(path)));
    a = Integer.valueOf(br.readLine());
    b = Integer.valueOf(br.readLine());
}

public int getA(){
    return a;
}

public int getB(){
    return b;
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>下面是我们单独的计算器类。
</code></pre><p>复制代码</p>
<p>package com.test;<br>import java.io.IOException;</p>
<p>public class Calculator {</p>
<pre><code>public int add(int a,int b){
    return a + b;
}

public static void main(String[] args) throws NumberFormatException, IOException {
    Reader reader = new Reader(&quot;E:/data.txt&quot;);
    Calculator calculator = new Calculator();
    System.out.println(&quot;result:&quot; + calculator.add(reader.getA(),reader.getB()));
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>我们将一个类拆成了两个类，这样以后我们如果有减法，乘法等等，就不用出现那么多重复代码了。

以上是我临时杜撰的例子，虽然很简单，并且没有什么现实意义，但是我觉得足够表达单一职责的意思，并且也足够说明它的重要性。单一职责原则是我觉得六大原则当中最应该遵守的原则，因为我在实践过程中发现，当你在项目的开发过程中遵循它，几乎完全不会给你的系统造成任何多余的复杂性，反而会令你的程序看起来井然有序。



里氏替换原则（六大原则中最文静的姑娘，但却不太招人喜欢）：这个原则表达的意思是一个子类应该可以替换掉父类并且可以正常工作。

那么翻译成比较容易理解的话，就是说，子类一般不该重写父类的方法，因为父类的方法一般都是对外公布的接口，是具有不可变性的，你不该将一些不该变化的东西给修改掉。

上述只是通常意义上的说法，很多情况下，我们不必太理解里氏替换这个文静的姑娘，比如模板方法模式，缺省适配器，装饰器模式等一些设计模式，就完全不搭理这个文静的姑娘。

不过就算如此，如果你真的遇见了不得不重写父类方法的场景，那么请你考虑，你是否真的要把这个类作为子类出现在这里，或者说这样做所换来的是否能弥补你失去的东西，比如子类无法代替父类工作，那么就意味着如果你的父类可以在某一个场景里工作的很正常，那么你的子类当然也应该可以，否则就会出现下述场景。

比如我们有某一个类，其中有一个方法，调用了某一个父类的方法。
</code></pre><p>复制代码</p>
<p>//某一个类<br>public class SomeoneClass {<br>    //有某一个方法，使用了一个父类类型<br>    public void someoneMethod(Parent parent){<br>        parent.method();<br>    }<br>}</p>
<p>复制代码</p>
<pre><code>父类代码如下。
</code></pre><p>public class Parent {</p>
<pre><code>public void method(){
    System.out.println(&quot;parent method&quot;);
}
</code></pre><p>}</p>
<pre><code>结果我有一个子类把父类的方法给覆盖了，并且抛出了一个异常。
</code></pre><p>复制代码</p>
<p>public class SubClass extends Parent{</p>
<pre><code>//结果某一个子类重写了父类的方法，说不支持该操作了
public void method() {
    throw new UnsupportedOperationException();
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>这个异常是运行时才会产生的，也就是说，我的SomeoneClass并不知道会出现这种情况，结果就是我调用下面这段代码的时候，本来我们的思维是Parent都可以传给someoneMethod完成我的功能，我的SubClass继承了Parent，当然也可以了，但是最终这个调用会抛出异常。
</code></pre><p>复制代码</p>
<p>public class Client {</p>
<pre><code>public static void main(String[] args) {
    SomeoneClass someoneClass = new SomeoneClass();
    someoneClass.someoneMethod(new Parent());
    someoneClass.someoneMethod(new SubClass());
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code> 这就相当于埋下了一个个陷阱，因为本来我们的原则是，父类可以完成的地方，我用子类替代是绝对没有问题的，但是这下反了，我每次使用一个子类替换一个父类的时候，我还要担心这个子类有没有给我埋下一个上面这种炸弹。

 所以里氏替换原则是一个需要我们深刻理解的原则，因为往往有时候违反它我们可以得到很多，失去一小部分，但是有时候却会相反，所以要想做到活学活用，就要深刻理解这个原则的意义所在。      


接口隔离原则（六大原则当中最挑三拣四的挑剔女，胸部极小）：也称接口最小化原则，强调的是一个接口拥有的行为应该尽可能的小。

如果你做不到这一点你经常会发现这样的状况，一个类实现了一个接口，里面很多方法都是空着的，只有个别几个方法实现了。

这样做不仅会强制实现的人不得不实现本来不该实现的方法，最严重的是会给使用者造成假象，即这个实现类拥有接口中所有的行为，结果调用方法时却没收获到想要的结果。

比如我们设计一个手机的接口时，就要手机哪些行为是必须的，要让这个接口尽量的小，或者通俗点讲，就是里面的行为应该都是这样一种行为，就是说只要是手机，你就必须可以做到的。

上面就是接口隔离原则这个挑剔女所挑剔的地方，假设你没有满足她，你或许会写出下面这样的手机接口。
</code></pre><p>复制代码</p>
<p>public interface Mobile {</p>
<pre><code>public void call();//手机可以打电话

public void sendMessage();//手机可以发短信

public void playBird();//手机可以玩愤怒的小鸟？
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>上面第三个行为明显就不是一个手机应该有的，或者说不是一个手机必须有的，那么上面这个手机的接口就不是最小接口，假设我现在的非智能手机去实现这个接口，那么playBird方法就只能空着了，因为它不能玩。

所以我们更好的做法是去掉这个方法，让Mobile接口最小化，然后再建立下面这个接口去扩展现有的Mobile接口。
</code></pre><p>public interface SmartPhone extends Mobile{</p>
<pre><code>public void playBird();//智能手机的接口就可以加入这个方法了
</code></pre><p>}</p>
<pre><code>这样两个接口就都是最小化的了，这样我们的非智能手机就去实现Mobile接口，实现打电话和发短信的功能，而智能手机就实现SmartPhone接口，实现打电话、发短信以及玩愤怒的小鸟的功能，两者都不会有多余的要实现的方法。

最小接口原则一般我们是要尽量满足的，如果实在有多余的方法，我们也有补救的办法，而且有的时候也确实不可避免的有一些实现类无法全部实现接口中的方法，这时候就轮到缺省适配器上场了，这个在后面再介绍。



依赖倒置原则（六大原则中最小鸟依人的姑娘，对抽象的东西非常依赖）：这个原则描述的是高层模块不该依赖于低层模块，二者都应该依赖于抽象，抽象不应该依赖于细节，细节应该依赖于抽象。

上面黑色加粗这句话是这个原则的原版描述，我来解释下我自己的理解，这个原则描述的是一个现实当中的事实，即实现都是易变的，而只有抽象是稳定的，所以当依赖于抽象时，实现的变化并不会影响客户端的调用。

比如上述的计算器例子，我们的计算器其实是依赖于数据读取类的，这样做并不是很好，因为如果我的数据不是文件里的了，而是在数据库里，这样的话，为了不影响你现有的代码，你就只能将你的Reader类整个改头换面。

或者还有一种方式就是，你再添加一个DBReader类，然后把你所有使用Reader读取的地方，全部手动替换成DBReader，这样其实也还可以接受，那假设我有的从文件读取，有的从数据库读取，有的从XML文件读取，有的从网络中读取，有的从标准的键盘输入读取等等。

你想怎么办呢？

所以我们最好的做法就是抽象出一个抽象类或者是接口，来表述数据读取的行为，然后让上面所有的读取方式所实现的类都实现这个接口，而我们的客户端，只使用我们定义好的接口，当我们的实现变化时，我只需要设置不同的实际类型就可以了，这样对于系统的扩展性是一个大大的提升。

针对上面简单的数据读取，我们可以定义如下接口去描述。
</code></pre><p>public interface Reader {</p>
<pre><code>public int getA();

public int getB();
</code></pre><p>}</p>
<pre><code>让我们原来的Reader改名为FileReader去实现这个接口，这样计算器就依赖于抽象的接口，这个依赖是非常稳定的，因为不论你以后要从哪读取数据，你的两个获取数据的方法永远都不会变。

  这样，我们让DBReader，XMLReader，NETReader，StandardOutPutStreamReader等等，都可以实现Reader这个接口，而我们的客户端调用依赖于一个Reader，这样不管数据是从哪来的，我们都可以应对自如，因为我根本不关心你是什么Reader，我只知道你能让我获得A和B这两个值就行了。

  这便是我们依赖于抽象所得到的灵活性，这也是JAVA语言的动态特性给我们带来的便利，所以我们一定要好好珍惜这个依赖于抽象的姑娘。



  迪米特原则（六大原则中最害羞的姑娘，不太爱和陌生人说话）：也称最小知道原则，即一个类应该尽量不要知道其他类太多的东西，不要和陌生的类有太多接触。

  这个原则的制定，是因为如果一个类知道或者说是依赖于另外一个类太多细节，这样会导致耦合度过高，应该将细节全部高内聚于类的内部，其他的类只需要知道这个类主要提供的功能即可。

  所谓高内聚就是尽可能将一个类的细节全部写在这个类的内部，不要漏出来给其他类知道，否则其他类就很容易会依赖于这些细节，这样类之间的耦合度就会急速上升，这样做的后果往往是一个类随便改点东西，依赖于它的类全部都要改。

  比如我把上述的例子改变一下。
</code></pre><p>复制代码</p>
<p>import java.io.BufferedReader;<br>import java.io.File;<br>import java.io.FileNotFoundException;<br>import java.io.FileReader;<br>import java.io.IOException;</p>
<p>public class Reader {</p>
<pre><code>int a,b;

private String path;

private BufferedReader br;

public Reader(String path){
    this.path = path;
}

public void setBufferedReader() throws FileNotFoundException{
    br = new BufferedReader(new FileReader(new File(path)));
}

public void readLine() throws NumberFormatException, IOException{
    a = Integer.valueOf(br.readLine());
    b = Integer.valueOf(br.readLine());
}

public int getA(){
    return a;
}

public int getB(){
    return b;
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>Reader类改成上述这个样子，显然它给其他的类透漏了太多细节，让别人知道了它的太多细节，这样我客户端调用的时候就很可能写成如下形式。
</code></pre><p>复制代码</p>
<p>public class Client {</p>
<pre><code>public static void main(String[] args) throws Exception {
    Reader reader = new Reader(&quot;E:/test.txt&quot;);
    reader.setBufferedReader();
    reader.readLine();
    int a = reader.getA();
    int b = reader.getB();
    //以下用于计算等等
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code>这样客户端就依赖于reader的多个行为才能最终获取到A和B两个数值，这时候两个类的耦合度就太高了，我们更好的做法使用访问权限限制将二者都给隐藏起来不让外部调用的类知道这些。就像下面这样。
</code></pre><p>复制代码</p>
<p>public class Reader {</p>
<pre><code>int a,b;
private String path;
private BufferedReader br;
public Reader(String path) throws Exception{
    super();
    this.path = path;
    setBufferedReader();
    readLine();
}
//注意，我们变为私有的方法
private void setBufferedReader() throws FileNotFoundException{
    br = new BufferedReader(new FileReader(path));
}
//注意，我们变为私有的方法
private void readLine() throws NumberFormatException, IOException{
    a = Integer.valueOf(br.readLine());
    b = Integer.valueOf(br.readLine());
}

public int getA(){
    return a;
}

public int getB(){
    return b;
}
</code></pre><p>}</p>
<p>复制代码</p>
<pre><code> 我们最终将两个方法都变为私有封装在Reader类当中，这样外部的类就无法知道这两个方法了，所以迪米特原则虽说是指的一个类应当尽量不要知道其他类太多细节，但其实更重要的是一个类应当不要让外部的类知道自己太多。两者是相辅相成的，只要你将类的封装性做的很好，那么外部的类就无法依赖当中的细节。



 开-闭原则（六大原则中绝对的大姐大，另外五姐妹心甘情愿臣服）：最后一个原则，一句话，对修改关闭，对扩展开放。

 就是说我任何的改变都不需要修改原有的代码，而只需要加入一些新的实现，就可以达到我的目的，这是系统设计的理想境界，但是没有任何一个系统可以做到这一点，哪怕我一直最欣赏的spring框架也做不到，虽说它的扩展性已经强到变态。

 这个原则更像是前五个原则的总纲，前五个原则就是围着它转的，只要我们尽量的遵守前五个原则，那么设计出来的系统应该就比较符合开闭原则了，相反，如果你违背了太多，那么你的系统或许也不太遵循开闭原则。



 在《大话设计模式》一书中，提到一句话与各位共勉，我觉得很有说服力，即用抽象构建框架，用细节实现扩展。

 以上六个原则写出来是为了指导后面设计模式的描述，基本都是我自己体会出来的理解，或许当中有好有坏，有优有差，各位不需要太过在意形式的表述，完全可以有自己的理解。

下期预告：单例模式。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《转》&lt;br&gt;说到设计模式，当初第一次听到时，第一反应就是很深奥，完全理解不了这个概念到底是什么意思，下面我先从网上摘录一份定义。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;设计模式（Designpattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。

上面是百度当中的解释，来解释一下这句简单的话的含义，几个关键词。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="编程" scheme="http://shiyansong.com/categories/Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>金字塔的诱惑</title>
    <link href="http://shiyansong.com/2016/09/22/%E9%87%91%E5%AD%97%E5%A1%94%E7%9A%84%E8%AF%B1%E6%83%91/"/>
    <id>http://shiyansong.com/2016/09/22/金字塔的诱惑/</id>
    <published>2016-09-22T01:11:04.000Z</published>
    <updated>2016-09-22T02:22:03.579Z</updated>
    
    <content type="html"><![CDATA[<p> 开始异世界之旅   《1》</p>
<p> 本文以K-Master服务器基础环境配置为例分别演示用户配置、sudo权限配置、网路配置、关闭防火墙、安装JDK工具等。用户需参照以下步骤完成KVMSlave1~KVMSlave3服务器的基础环境配置。</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>硬件环境：CentOS 6.5 服务器4台（一台为Master节点，三台为Slave节点）<br>软件环境：Java 1.7.0_45、Hadoop-1.2.1<br>1、安装环境</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>硬件环境：CentOS 6.5 服务器4台（一台为Master节点，三台为Slave节点）<br>软件环境：Java 1.7.0_45、hadoop-1.2.1</p>
<h2 id="2、-用户配置"><a href="#2、-用户配置" class="headerlink" title="2、 用户配置"></a>2、 用户配置</h2><p>1）添加一个用户<br>[hadoop@K-Master hadoop]$ adduser hadoop                       #新建hadoop用户<br>[hadoop@K-Master hadoop]$ passwd hadoop                            #hadoop用户设置密码</p>
<p>2）建工作组<br>[hadoop@K-Master hadoop]$ groupadd hadoop                      #新建hadoop工作组</p>
<p>3）给已有的用户增加工作组<br>[hadoop@K-Master hadoop]$ usermod -G hadoop hadoop</p>
<h2 id="2、-sudo权限配置"><a href="#2、-sudo权限配置" class="headerlink" title="2、 sudo权限配置"></a>2、 sudo权限配置</h2><p>1）新建个用户组admin<br>[hadoop@K-Master hadoop]# groupadd admin</p>
<p>2）将已有用户添加到admin用户组<br>[hadoop@K-Master hadoop]# usermod -G admin,hadoop hadoop</p>
<p>3）赋予修改/etc/sudoers文件写权限<br>[hadoop@K-Master hadoop]# chmod u+w /etc/sudoers </p>
<p>4）编辑/etc/sudoers文件<br>[hadoop@K-Master hadoop]# vi /etc/sudoers<br>缺省只有一条配置：<br>root    ALL=(ALL) ALL<br>在下边再加一条配置：<br>%admin    ALL=(ALL) ALL</p>
<p>这样admin用户组就拥有了sudo权限，属于admin用户组的hadoop用户同样拥有了sudo权限。<br>5）编辑完成后降低权限<br>[hadoop@K-Master hadoop]$ chmod u-w /etc/sudoers</p>
<h2 id="3、-网络配置"><a href="#3、-网络配置" class="headerlink" title="3、 网络配置"></a>3、 网络配置</h2><p>1）配置IP地址</p>
<p>详细配置信息如下所示：<br>[hadoop@K-Master hadoop]$ su hadoop                #切换为hadoop用户<br>[hadoop@K-Master hadoop]$ sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0<br>HWADDR=06:8D:30:00:00:27<br>TYPE=Ethernet<br>BOOTPROTO=static<br>IPADDR=192.168.100.147<br>PREFIX=24<br>GATEWAY=192.168.100.1<br>DNS1=192.168.100.1<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=yes<br>IPV6INIT=no<br>NAME=eth0<br>UUID=660a57a1-5edf-4cdd-b456-e7e1059aef11<br>ONBOOT=yes<br>LAST_CONNECT=1411901185</p>
<p>2）重启网络服务使网络设置生效<br>[hadoop@K-Master hadoop]$ sudo service network restart<br>Shutting down interface eth0:  Device state: 3 (disconnected)<br>                                                    [  OK  ]<br>Shutting down loopback interface:                   [  OK  ]<br>Bringing up loopback interface:                     [  OK  ]<br>Bringing up interface eth0:  Active connection state: activated<br>Active connection path: /org/freedesktop/NetworkManager/ActiveConnection/1<br>                                                    [  OK  ]</p>
<p>3）测试IP网络配置<br>通过ifconfig命令查看网络的ip地址，如下信息显示eth0无线网卡的IP地址为192.168.100.147，与上述我们配置的IP地址吻合，表明IP地址配置成功。<br>[hadoop@K-Master ~]$ ifconfig<br>eth0  Link encap:Ethernet  HWaddr 06:8D:30:00:00:27<br>  inet addr:192.168.100.147  Bcast:192.168.100.255  Mask:255.255.255.0<br>  inet6 addr: fe80::48d:30ff:fe00:27/64 Scope:Link<br>  UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1<br>  RX packets:59099169 errors:0 dropped:0 overruns:0 frame:0<br>  TX packets:30049168 errors:0 dropped:0 overruns:0 carrier:0<br>  collisions:0 txqueuelen:1000<br>  RX bytes:12477388443 (11.6 GiB)  TX bytes:8811418526 (8.2 GiB)</p>
<p>loLink encap:Local Loopback<br>  inet addr:127.0.0.1  Mask:255.0.0.0<br>  inet6 addr: ::1/128 Scope:Host<br>  UP LOOPBACK RUNNING  MTU:16436  Metric:1<br>  RX packets:2266013 errors:0 dropped:0 overruns:0 frame:0<br>  TX packets:2266013 errors:0 dropped:0 overruns:0 carrier:0<br>  collisions:0 txqueuelen:0<br>  RX bytes:666482169 (635.6 MiB)  TX bytes:666482169 (635.6 MiB)</p>
<p>4）修改Host主机名<br>[hadoop@K-Master hadoop]$ sudo vi /etc/sysconfig/network<br>NETWORKING=yes<br>NETWORKING_IPV6=no<br>HOSTNAME=Master<br>[hadoop@K-Master hadoop]$ sudo vi /etc/hosts<br>127.0.0.1               localhost.localdomain<br>::1                     hdirect30 hdirect30<br>192.168.100.201         K-Master</p>
<p>5）重启主机使得主机名生效<br>[hadoop@K-Master hadoop]$ sudo reboot</p>
<h2 id="4、-关闭防火墙"><a href="#4、-关闭防火墙" class="headerlink" title="4、 关闭防火墙"></a>4、 关闭防火墙</h2><p>在启动前关闭集群中所有机器的防火墙，不然会出现datanode开后又自动关闭。<br>1）查看防火墙状态<br>[hadoop@K-Master ~]$ sudo service iptables status<br>iptables: Firewall is not running.</p>
<p>2）关闭防火墙<br>[hadoop@K-Master hadoop]$ sudo service iptables stop<br>iptables: Setting chains to policy ACCEPT: filter   [  OK  ]<br>iptables: Flushing firewall rules:                  [  OK  ]<br>iptables: Unloading modules:                        [  OK  ]</p>
<p>3）永久关闭防火墙<br>[hadoop@K-Master hadoop]$ sudo chkconfig iptables off</p>
<p>4）关闭SELINUX<br>[hadoop@K-Master hadoop]$ sudo vi /etc/selinux/config<br>SELINUX=disabled</p>
<h2 id="5、-安装JDK工具"><a href="#5、-安装JDK工具" class="headerlink" title="5、 安装JDK工具"></a>5、 安装JDK工具</h2><p>1）解压<br>[hadoop@K-Master ~]$ scp hadoop@192.168.0.201:/home/hadoop/jdk-7u65-linux-x64.rpm .<br>[hadoop@K-Master ~]$ sudo rpm -ivh jdk-7u65-linux-x64.rpm</p>
<p>2）编辑”/etc/profile”文件，在后面添加Java的”JAVA_HOME”、”CLASSPATH”以及”PATH”内容。<br>[hadoop@K-Master ~]$ sudo vim /etc/profile</p>
<p>#JAVA<br>export JAVA_HOME=/usr/java/jdk1.7.0_65<br>export JRE_HOME=$JAVA_HOME/jre<br>export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib<br>export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</p>
<p>#HADOOP<br>export HADOOP_HOME=/usr/hadoop-1.2.1<br>export PATH=$PATH:$HADOOP_HOME/bin<br>export HADOOP_HOME_WARN_SUPPRESS=1</p>
<p>3）使配置文件生效<br>[hadoop@K-Master ~]$ source /etc/profile</p>
<p>更多详情见请继续阅读下一页的精彩内容： <a href="http://www.linuxidc.com/Linux/2015-03/114669p2.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-03/114669p2.htm</a><br>————————————–分割线 ————————————–<br>Ubuntu14.04下Hadoop2.4.1单机/伪分布式安装配置教程  <a href="http://www.linuxidc.com/Linux/2015-02/113487.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-02/113487.htm</a><br>CentOS安装和配置Hadoop2.2.0  <a href="http://www.linuxidc.com/Linux/2014-01/94685.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-01/94685.htm</a><br>Ubuntu 13.04上搭建Hadoop环境 <a href="http://www.linuxidc.com/Linux/2013-06/86106.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-06/86106.htm</a><br>Ubuntu 12.10 +Hadoop 1.2.1版本集群配置 <a href="http://www.linuxidc.com/Linux/2013-09/90600.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-09/90600.htm</a><br>Ubuntu上搭建Hadoop环境（单机模式+伪分布模式） <a href="http://www.linuxidc.com/Linux/2013-01/77681.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2013-01/77681.htm</a><br>Ubuntu下Hadoop环境的配置 <a href="http://www.linuxidc.com/Linux/2012-11/74539.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2012-11/74539.htm</a><br>单机版搭建Hadoop环境图文教程详解 <a href="http://www.linuxidc.com/Linux/2012-02/53927.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2012-02/53927.htm</a><br>搭建Hadoop环境（在Winodws环境下用虚拟机虚拟两个Ubuntu系统进行搭建） <a href="http://www.linuxidc.com/Linux/2011-12/48894.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2011-12/48894.htm</a></p>
<p> 《——————————–loading————————————–》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 开始异世界之旅   《1》&lt;/p&gt;
&lt;p&gt; 本文以K-Master服务器基础环境配置为例分别演示用户配置、sudo权限配置、网路配置、关闭防火墙、安装JDK工具等。用户需参照以下步骤完成KVMSlave1~KVMSlave3服务器的基础环境配置。&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;硬件环境：CentOS 6.5 服务器4台（一台为Master节点，三台为Slave节点）&lt;br&gt;软件环境：Java 1.7.0_45、Hadoop-1.2.1&lt;br&gt;1、安装环境&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="编程" scheme="http://shiyansong.com/categories/Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>一群逗逼的狂欢</title>
    <link href="http://shiyansong.com/2016/09/21/%E4%B8%80%E7%BE%A4%E9%80%97%E9%80%BC%E7%9A%84%E7%8B%82%E6%AC%A2/"/>
    <id>http://shiyansong.com/2016/09/21/一群逗逼的狂欢/</id>
    <published>2016-09-21T09:09:09.000Z</published>
    <updated>2016-09-22T02:22:10.079Z</updated>
    
    <content type="html"><![CDATA[<p>异世界之旅  《2》</p>
<p>单机模式所需要的系统资源是最少的，这种安装模式下，Hadoop的 core-site.xml、mapred-site.xml、hdfs-site.xml配置文件均为空。默认情况下，官方hadoop- 1.2.1.tar.gz文件默认使用的就是单机安装模式。当配置文件为空时，Hadoop完全运行在本地，不与其他节点交互，也不使用Hadoop文件 系统，不加载任何守护进程，该模式主要用于开发调试MapReduce应用程序的逻辑，不与任何守护进程交互进而避免复杂性。以hadoop用户远程登录 K-Master服务器，在K-Master服务器上安装Hadoop过程如下。</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>硬件环境：CentOS 6.5 服务器4台（一台为Master节点，三台为Slave节点）<br>软件环境：Java 1.7.0_45、hadoop-1.2.1<br>1、安装Hadoop</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>1）以hadoop用户远程登录K-Master服务器，下载hadoop-1.2.1.tar.gz ，并将其拷贝到K-Master服务器的/home/hadoop/目录下。<br>2）解压hadoop-1.2.1.tar.gz<br>[hadoop@KVM-Master ~]$ su hadoop</p>
<p>[hadoop@KVM-Master ~]$ cd /usr</p>
<p>[hadoop@KVM-Master usr]$ sudo tar –zxvf  /home/hadoop/hadoop-1.2.1.tar.gz</p>
<p>3) 重命名hadoop<br>[hadoop@KVM-Master usr]$ sudo mv hadoop-1.2.1/ hadoop/</p>
<p>4）将文件夹”hadoop”读权限分配给hadoop用户<br>很关键到一步，便于hadoop用户对该文件夹的文件拥有读写权限，不然后续hadoop启动后，无法在该文件夹创建文件和写入日志信息。<br>[hadoop@KVM-Master usr]$ sudo chown -R hadoop:hadoop /usr/hadoop</p>
<p>5）删除安装包<br>[hadoop@KVM-Master ~]$ rm –rf /home/hadoop/hadoop-1.2.1.tar.gz #删除”hadoop-1.2.1.tar.gz”安装包</p>
<h2 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h2><p>1）配置/etc/profile<br>[hadoop@KVM-Master ~]$ sudo vi /etc/profile</p>
<p>#HADOOP</p>
<p>export HADOOP_HOME=/usr/hadoop</p>
<p>export PATH=$PATH:$HADOOP_HOME/bin </p>
<p>export HADOOP_HOME_WARN_SUPPRESS=1 </p>
<p>2）使得配置文件在当前终端立即生效<br>[hadoop@KVM-Master ~] $source /etc/profile</p>
<h2 id="3、启动Hadoop"><a href="#3、启动Hadoop" class="headerlink" title="3、启动Hadoop"></a>3、启动Hadoop</h2><p>1）使用start-al.sh命令启动hadoop<br>[hadoop@KVM-Master ~] $start-all.sh</p>
<p>2）使用jps查看启动是否成功<br>[hadoop@KVM-Master ~] $jps</p>
<p>jps</p>
<p>因为是单机模式，NameNode和JobTracker等都没有启动，怎么知道安装是否成功了？<br>3）查看HDFS系统<br>[hadoop@KVM-Master ~] $ hadoop fs -ls /</p>
<p>通过hadoop fs -ls /命令查看Hadoop HDFS文件管理系统，显示的像Linux文件系统目录。若出现上述所示结果，表明Hadoop单机版安装成功。到目前为止，我们并没有对Hadoop的 配置文件做任何修改，全是默认配置，即配置文件全为空，如下所示。<br>[hadoop@K-Master hadoop] vi conf/core-site.xml</p>
<p>&lt;?xml version=”1.0”?&gt;</p>
<p>&lt;?xml-stylesheet type=”text/xsl” href=”configuration.xsl”?&gt;</p>
<!-- Put site-specific property overrides in this file. -->
<configuration><br><br><br><br></configuration>

<p>《——————————–loading————————————–》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异世界之旅  《2》&lt;/p&gt;
&lt;p&gt;单机模式所需要的系统资源是最少的，这种安装模式下，Hadoop的 core-site.xml、mapred-site.xml、hdfs-site.xml配置文件均为空。默认情况下，官方hadoop- 1.2.1.tar.gz文件默认使用的就是单机安装模式。当配置文件为空时，Hadoop完全运行在本地，不与其他节点交互，也不使用Hadoop文件 系统，不加载任何守护进程，该模式主要用于开发调试MapReduce应用程序的逻辑，不与任何守护进程交互进而避免复杂性。以hadoop用户远程登录 K-Master服务器，在K-Master服务器上安装Hadoop过程如下。&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;硬件环境：CentOS 6.5 服务器4台（一台为Master节点，三台为Slave节点）&lt;br&gt;软件环境：Java 1.7.0_45、hadoop-1.2.1&lt;br&gt;1、安装Hadoop&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="编程" scheme="http://shiyansong.com/categories/Programming/"/>
    
    
  </entry>
  
</feed>
